{"version":3,"sources":["components/card/index.jsx","components/board/index.jsx","deck.js","App.jsx","index.js"],"names":["Card","disabled","solved","handleClick","id","type","flipped","height","width","className","style","onClick","alt","src","Board","dimension","cards","map","card","key","includes","initializeDeck","array","_array","slice","i","length","randomIndex","Math","floor","random","temp","shuffle","reduce","acc","push","App","useState","setCards","setFlipped","setDimension","score","setScore","setSolved","setDisabled","turns","setTurns","points","setPoints","setRestorGame","useEffect","resizeBoard","preloadImages","checkScore","resizeListener","window","addEventListener","removeEventListener","Image","resetCards","updateScore","callback","newScore","setTimeout","newGame","sameCardClicked","isMatch","clickedCard","find","min","document","documentElement","clientWidth","clientHeight","display","flexDirection","justifyContent","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.9e48aa96.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './styles.css'\n\nexport default function Card ({disabled, solved, handleClick, id, type, flipped, height,                \n  width}) {\n  return <div\n    className={`flip-container ${flipped ? 'flipped' : ''}`}\n    style={{\n      width, height\n    }}\n    onClick={() => disabled ? null : handleClick(id)}>\n    \n    <div className='flipper'>\n      <img alt=''\n        style={{\n          height, width\n        }} \n        className={flipped ? 'front':'back'}\n        src={flipped || solved ? `/img/${type}.png`: `/img/back.png`}\n      />\n    </div>\n  </div>\n}\nCard.propTypes={\n  handleClick: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n  flipped: PropTypes.bool.isRequired,\n  type: PropTypes.string.isRequired,\n  height: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  solved: PropTypes.bool.isRequired,\n  disabled: PropTypes.bool.isRequired,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport Card from '../card'\nimport './styles.css'\n\nexport default function Board({dimension, cards, flipped, solved, handleClick, disabled}) {\n  return (\n    <div className='board'>\n      {\n        cards.map((card) => (<Card\n          key={card.id}\n          id={card.id}\n          type={card.type}\n          width={dimension /4.5}\n          height={dimension /4.5}\n          flipped={flipped.includes(card.id)}\n          solved={solved.includes(card.id)}\n          handleClick={handleClick}\n          disabled={disabled || solved.includes(card.id)}\n            \n        />\n        )\n        )   }\n    </div>\n    \n  )  }\nBoard.propTypes ={\n   \n  dimension: PropTypes.number.isRequired,\n  cards:   PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  flipped: PropTypes.arrayOf(PropTypes.number).isRequired,\n  solved: PropTypes.arrayOf(PropTypes.number).isRequired,\n  handleClick: PropTypes.func.isRequired,\n  disabled:  PropTypes.bool.isRequired\n}","\n\nfunction shuffle(array){\n  const _array = array.slice(0)\n  for(let i = 0; i < array.length - 1; i++){\n    let randomIndex = Math.floor(Math.random() * (i + 1))\n    let temp = _array[i]\n    _array[i] = _array[randomIndex]\n    _array[randomIndex] = temp\n  }\n  return _array\n}\nexport default function  initializeDeck() {\n  let id = 0\n  const cards = ['armadillo', 'humpback', 'otter','panda', 'parrot',\n    'prayingmantis', 'redfox', 'slothsleeping'\n  ].reduce((acc, type) => {\n    acc.push({\n      id: id++,\n      type\n    })\n    acc.push({\n      id: id++,\n      type  \n    })\n    return acc\n  }, [])\n\n  return shuffle(cards)\n}","/* eslint-disable */\nimport React, { useState, useEffect }from 'react'\nimport Board from './components/board'\nimport Gameover from './components/gameover'\nimport initializeDeck from './deck'\n\n\nexport default function App() {\n  const [cards,setCards] = useState([])\n  const [flipped, setFlipped] = useState([])\n  const [dimension, setDimension] = useState(400)\n  const [score, setScore] = useState(0);\n  const [solved, setSolved] = useState([])\n  const [disabled, setDisabled] = useState(false)\n  const [turns, setTurns] = useState(0)\n  const [points, setPoints] = useState(0)\n  const [restorgame, setRestorGame] = useState([])\n  \n\n  \n  useEffect(() => {\n    resizeBoard()\n    setCards(initializeDeck())  \n\n  }, [])\n  useEffect(() => {\n    preloadImages()\n  })\n\n  useEffect(() => {\n    checkScore();\n  }, [score])\n\n  useEffect(() => {\n  const resizeListener = window.addEventListener('resize', resizeBoard)\n\n  return () => window.removeEventListener('resize', resizeListener)\n\n  })\n\n  const handleClick = (id) => {\n    setDisabled(true)\n    if (flipped.length === 0) {\n      setFlipped([id])\n      setDisabled(false)\n    }\n     else if (sameCardClicked(id)){\n      setDisabled(false)\n     } else {\n      setFlipped([flipped[0], id])     \n      if (isMatch(id)) {\n        setSolved([...solved, flipped[0], id])\n        setTurns(turns => turns + 1)\n        updateScore(score, checkScore);\n        resetCards()\n\n       \n      }else {\n        setTurns(turns => turns + 1)\n        setTimeout(resetCards, 2000)\n      }\n\n    }\n  }\n  const preloadImages = () => {\n    cards.map((card) =>{\n      const src = `/img/${card.type}.png`\n      new Image().src = src\n    })\n  }\n  const resetCards = () => {\n    setFlipped([])\n    setDisabled(false)\n  }\n\n  const updateScore = (score, callback) => {\n    let newScore = score + 1;\n    setScore(score + 1);\n    callback(newScore);\n  }\n  const checkScore = (score) => {\n    if (score>7) {\n      setPoints(points + 1)\n      setTimeout(newGame, 3000);\n    }\n  }\n\n  const newGame = () => {\n    setSolved([]);\n    setCards(initializeDeck());\n    setFlipped([]);\n    setDisabled(false);\n    setTurns(0);\n  }\n\n  const divStyle = {        \n   display: 'flex',      \n   flexDirection: 'row',        \n   justifyContent: 'center'    };\n\n\n\n\n\n  const sameCardClicked = (id) => flipped.includes(id) \n  const isMatch = (id) => {\n    const clickedCard = cards.find((card) => card.id === id);\n    const flippedCard = cards.find((card) => flipped[0] === card.id);\n    return flippedCard.type === clickedCard.type;\n  }\n  const resizeBoard = () => {\n    setDimension(Math.min(\n      document.documentElement.clientWidth,\n      document.documentElement.clientHeight,\n    \n    ),\n    )\n  }\n\n  return (\n\n    \n\n \n    <div>\n      <h1>Memory Game</h1>\n      <h2>Click the cards to  play</h2>\n      <h3> You took {turns} turns</h3>\n      <div style={divStyle}>\n      <button \n      className=\"SaveGame\" onClick={() => setRestorGame(setFlipped([]),checkScore(),setSolved([]),setDisabled(false))}>Save Game</button> \n      <button className=\"restart\" onClick={() => newGame()}>Restart Game</button>\n      </div>\n      <div className=\"points\">Games Won: {points} </div>\n      {/* <Gameover \n      newGame={newGame}\n      points={points}\n      restorgame={restorgame}\n      /> */}\n      \n      <Board\n       \n        dimension={dimension}\n        cards={cards}\n        flipped={flipped}\n        solved={solved}\n        handleClick={handleClick}\n        disabled={disabled}\n      />\n    </div>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}