{"ast":null,"code":"var _jsxFileName = \"/Users/maryabraham/workspaces/cardgame/src/App.jsx\";\n\n/* eslint-disable */\nimport React, { useState, useEffect } from 'react';\nimport Board from './components/board';\nimport Gameover from './components/gameover';\nimport initializeDeck from './deck';\nexport default function App() {\n  const [cards, setCards] = useState([]);\n  const [flipped, setFlipped] = useState([]);\n  const [dimension, setDimension] = useState(400);\n  const [score, setScore] = useState(0);\n  const [solved, setSolved] = useState([]);\n  const [disabled, setDisabled] = useState(false);\n  const [turns, setTurns] = useState(0);\n  const [points, setPoints] = useState(0);\n  const [restorgame, setRestorGame] = useState([]);\n  useEffect(() => {\n    resizeBoard();\n    setCards(initializeDeck());\n  }, []);\n  useEffect(() => {\n    preloadImages();\n  });\n  useEffect(() => {\n    checkScore();\n  }, [score]);\n  useEffect(() => {\n    const resizeListener = window.addEventListener('resize', resizeBoard);\n    return () => window.removeEventListener('resize', resizeListener);\n  });\n\n  const handleClick = id => {\n    setDisabled(true);\n\n    if (flipped.length === 0) {\n      setFlipped([id]);\n      setDisabled(false);\n    } else if (sameCardClicked(id)) {\n      setDisabled(false);\n    } else {\n      setFlipped([flipped[0], id]);\n\n      if (isMatch(id)) {\n        setSolved([...solved, flipped[0], id]);\n        setTurns(turns => turns + 1);\n        updateScore(score, checkScore);\n        resetCards();\n      } else {\n        setTurns(turns => turns + 1);\n        setTimeout(resetCards, 2000);\n      }\n    }\n  };\n\n  const preloadImages = () => {\n    cards.map(card => {\n      const src = `/img/${card.type}.png`;\n      new Image().src = src;\n    });\n  };\n\n  const resetCards = () => {\n    setFlipped([]);\n    setDisabled(false);\n  };\n\n  const updateScore = (score, callback) => {\n    let newScore = score + 1;\n    setScore(score + 1);\n    callback(newScore);\n  };\n\n  const checkScore = score => {\n    if (score > 7) {\n      setPoints(points + 1);\n      setTimeout(newGame, 3000);\n    }\n  };\n\n  const newGame = () => {\n    setSolved([]);\n    setCards(initializeDeck());\n    setFlipped([]);\n    setDisabled(false);\n    setTurns(0);\n  };\n\n  const divStyle = {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'center'\n  };\n\n  const sameCardClicked = id => flipped.includes(id);\n\n  const isMatch = id => {\n    const clickedCard = cards.find(card => card.id === id);\n    const flippedCard = cards.find(card => flipped[0] === card.id);\n    return flippedCard.type === clickedCard.type;\n  };\n\n  const resizeBoard = () => {\n    setDimension(Math.min(document.documentElement.clientWidth, document.documentElement.clientHeight));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }, \"Memory Game\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, \"Click the cards to  play\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, \" You took \", turns, \" turns\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"SaveGame\",\n    onClick: () => setRestorGame(setFlipped([]), checkScore(), setSolved([]), setDisabled(false)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, \"Save Game\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"restart\",\n    onClick: () => newGame(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, \"Restart Game\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"points\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }, \"Games Won: \", points, \" \"), /*#__PURE__*/React.createElement(Board, {\n    dimension: dimension,\n    cards: cards,\n    flipped: flipped,\n    solved: solved,\n    handleClick: handleClick,\n    disabled: disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/maryabraham/workspaces/cardgame/src/App.jsx"],"names":["React","useState","useEffect","Board","Gameover","initializeDeck","App","cards","setCards","flipped","setFlipped","dimension","setDimension","score","setScore","solved","setSolved","disabled","setDisabled","turns","setTurns","points","setPoints","restorgame","setRestorGame","resizeBoard","preloadImages","checkScore","resizeListener","window","addEventListener","removeEventListener","handleClick","id","length","sameCardClicked","isMatch","updateScore","resetCards","setTimeout","map","card","src","type","Image","callback","newScore","newGame","divStyle","display","flexDirection","justifyContent","includes","clickedCard","find","flippedCard","Math","min","document","documentElement","clientWidth","clientHeight"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport React, { useState, useEffect }from 'react'\nimport Board from './components/board'\nimport Gameover from './components/gameover'\nimport initializeDeck from './deck'\n\n\nexport default function App() {\n  const [cards,setCards] = useState([])\n  const [flipped, setFlipped] = useState([])\n  const [dimension, setDimension] = useState(400)\n  const [score, setScore] = useState(0);\n  const [solved, setSolved] = useState([])\n  const [disabled, setDisabled] = useState(false)\n  const [turns, setTurns] = useState(0)\n  const [points, setPoints] = useState(0)\n  const [restorgame, setRestorGame] = useState([])\n  \n\n  \n  useEffect(() => {\n    resizeBoard()\n    setCards(initializeDeck())  \n\n  }, [])\n  useEffect(() => {\n    preloadImages()\n  })\n\n  useEffect(() => {\n    checkScore();\n  }, [score])\n\n  useEffect(() => {\n  const resizeListener = window.addEventListener('resize', resizeBoard)\n\n  return () => window.removeEventListener('resize', resizeListener)\n\n  })\n\n  const handleClick = (id) => {\n    setDisabled(true)\n    if (flipped.length === 0) {\n      setFlipped([id])\n      setDisabled(false)\n    }\n     else if (sameCardClicked(id)){\n      setDisabled(false)\n     } else {\n      setFlipped([flipped[0], id])     \n      if (isMatch(id)) {\n        setSolved([...solved, flipped[0], id])\n        setTurns(turns => turns + 1)\n        updateScore(score, checkScore);\n        resetCards()\n\n       \n      }else {\n        setTurns(turns => turns + 1)\n        setTimeout(resetCards, 2000)\n      }\n\n    }\n  }\n  const preloadImages = () => {\n    cards.map((card) =>{\n      const src = `/img/${card.type}.png`\n      new Image().src = src\n    })\n  }\n  const resetCards = () => {\n    setFlipped([])\n    setDisabled(false)\n  }\n\n  const updateScore = (score, callback) => {\n    let newScore = score + 1;\n    setScore(score + 1);\n    callback(newScore);\n  }\n  const checkScore = (score) => {\n    if (score>7) {\n      setPoints(points + 1)\n      setTimeout(newGame, 3000);\n    }\n  }\n\n  const newGame = () => {\n    setSolved([]);\n    setCards(initializeDeck());\n    setFlipped([]);\n    setDisabled(false);\n    setTurns(0);\n  }\n\n  const divStyle = {        \n   display: 'flex',      \n   flexDirection: 'row',        \n   justifyContent: 'center'    };\n\n\n\n\n\n  const sameCardClicked = (id) => flipped.includes(id) \n  const isMatch = (id) => {\n    const clickedCard = cards.find((card) => card.id === id);\n    const flippedCard = cards.find((card) => flipped[0] === card.id);\n    return flippedCard.type === clickedCard.type;\n  }\n  const resizeBoard = () => {\n    setDimension(Math.min(\n      document.documentElement.clientWidth,\n      document.documentElement.clientHeight,\n    \n    ),\n    )\n  }\n\n  return (\n\n    \n\n \n    <div>\n      <h1>Memory Game</h1>\n      <h2>Click the cards to  play</h2>\n      <h3> You took {turns} turns</h3>\n      <div style={divStyle}>\n      <button \n      className=\"SaveGame\" onClick={() => setRestorGame(setFlipped([]),checkScore(),setSolved([]),setDisabled(false))}>Save Game</button> \n      <button className=\"restart\" onClick={() => newGame()}>Restart Game</button>\n      </div>\n      <div className=\"points\">Games Won: {points} </div>\n      {/* <Gameover \n      newGame={newGame}\n      points={points}\n      restorgame={restorgame}\n      /> */}\n      \n      <Board\n       \n        dimension={dimension}\n        cards={cards}\n        flipped={flipped}\n        solved={solved}\n        handleClick={handleClick}\n        disabled={disabled}\n      />\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}