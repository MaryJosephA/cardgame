{"ast":null,"code":"var _jsxFileName = \"/Users/maryabraham/workspaces/cardgame/src/components/board/index.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Card from '../card';\nimport './styles.css';\nexport default function Board({\n  dimension,\n  cards,\n  flipped,\n  solved,\n  handleClick,\n  disabled\n}) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"deck\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 5\n    }\n  }, cards.map(card => /*#__PURE__*/React.createElement(Card, {\n    key: card.id,\n    id: card.id,\n    type: card.type,\n    width: dimension / 4.5,\n    height: dimension / 4.5,\n    flipped: flipped.includes(card.id),\n    solved: solved.includes(card.id),\n    handleClick: handleClick,\n    disabled: disabled || solved.includes(card.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 30\n    }\n  }))));\n}\nBoard.propTypes = {\n  dimension: PropTypes.number.isRequired,\n  cards: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  flipped: PropTypes.arrayOf(PropTypes.number).isRequired,\n  solved: PropTypes.arrayOf(PropTypes.number).isRequired,\n  handleClick: PropTypes.func.isRequired,\n  disabled: PropTypes.bool.isRequired\n};","map":{"version":3,"sources":["/Users/maryabraham/workspaces/cardgame/src/components/board/index.jsx"],"names":["React","PropTypes","Card","Board","dimension","cards","flipped","solved","handleClick","disabled","map","card","id","type","includes","propTypes","number","isRequired","arrayOf","shape","func","bool"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAO,cAAP;AAEA,eAAe,SAASC,KAAT,CAAe;AAACC,EAAAA,SAAD;AAAYC,EAAAA,KAAZ;AAAmBC,EAAAA,OAAnB;AAA4BC,EAAAA,MAA5B;AAAoCC,EAAAA,WAApC;AAAiDC,EAAAA;AAAjD,CAAf,EAA2E;AACxF,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIJ,KAAK,CAACK,GAAN,CAAWC,IAAD,iBAAW,oBAAC,IAAD;AACnB,IAAA,GAAG,EAAEA,IAAI,CAACC,EADS;AAEnB,IAAA,EAAE,EAAED,IAAI,CAACC,EAFU;AAGnB,IAAA,IAAI,EAAED,IAAI,CAACE,IAHQ;AAInB,IAAA,KAAK,EAAET,SAAS,GAAE,GAJC;AAKnB,IAAA,MAAM,EAAEA,SAAS,GAAE,GALA;AAMnB,IAAA,OAAO,EAAEE,OAAO,CAACQ,QAAR,CAAiBH,IAAI,CAACC,EAAtB,CANU;AAOnB,IAAA,MAAM,EAAEL,MAAM,CAACO,QAAP,CAAgBH,IAAI,CAACC,EAArB,CAPW;AAQnB,IAAA,WAAW,EAAEJ,WARM;AASnB,IAAA,QAAQ,EAAEC,QAAQ,IAAIF,MAAM,CAACO,QAAP,CAAgBH,IAAI,CAACC,EAArB,CATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAArB,CAFJ,CADA,CADF;AAoBI;AACNT,KAAK,CAACY,SAAN,GAAiB;AAEfX,EAAAA,SAAS,EAAEH,SAAS,CAACe,MAAV,CAAiBC,UAFb;AAGfZ,EAAAA,KAAK,EAAIJ,SAAS,CAACiB,OAAV,CAAkBjB,SAAS,CAACkB,KAAV,CAAgB,EAAhB,CAAlB,EAAuCF,UAHjC;AAIfX,EAAAA,OAAO,EAAEL,SAAS,CAACiB,OAAV,CAAkBjB,SAAS,CAACe,MAA5B,EAAoCC,UAJ9B;AAKfV,EAAAA,MAAM,EAAEN,SAAS,CAACiB,OAAV,CAAkBjB,SAAS,CAACe,MAA5B,EAAoCC,UAL7B;AAMfT,EAAAA,WAAW,EAAEP,SAAS,CAACmB,IAAV,CAAeH,UANb;AAOfR,EAAAA,QAAQ,EAAGR,SAAS,CAACoB,IAAV,CAAeJ;AAPX,CAAjB","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport Card from '../card'\nimport './styles.css'\n\nexport default function Board({dimension, cards, flipped, solved, handleClick, disabled}) {\n  return (\n    <div className='deck'>\n    <div className='board'>\n      {\n        cards.map((card) => (<Card\n          key={card.id}\n          id={card.id}\n          type={card.type}\n          width={dimension /4.5}\n          height={dimension /4.5}\n          flipped={flipped.includes(card.id)}\n          solved={solved.includes(card.id)}\n          handleClick={handleClick}\n          disabled={disabled || solved.includes(card.id)}\n            \n        />\n        )\n        )   }\n    </div>\n    </div>\n  )  }\nBoard.propTypes ={\n   \n  dimension: PropTypes.number.isRequired,\n  cards:   PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  flipped: PropTypes.arrayOf(PropTypes.number).isRequired,\n  solved: PropTypes.arrayOf(PropTypes.number).isRequired,\n  handleClick: PropTypes.func.isRequired,\n  disabled:  PropTypes.bool.isRequired\n}"]},"metadata":{},"sourceType":"module"}