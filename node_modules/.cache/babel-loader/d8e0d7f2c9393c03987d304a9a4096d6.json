{"ast":null,"code":"import _toConsumableArray from\"/Users/maryabraham/workspaces/cardgame/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/maryabraham/workspaces/cardgame/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";/* eslint-disable */import React,{useState,useEffect}from'react';import Board from'./components/board';import Gameover from'./components/gameover';import initializeDeck from'./deck';export default function App(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),cards=_useState2[0],setCards=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),flipped=_useState4[0],setFlipped=_useState4[1];var _useState5=useState(400),_useState6=_slicedToArray(_useState5,2),dimension=_useState6[0],setDimension=_useState6[1];var _useState7=useState(0),_useState8=_slicedToArray(_useState7,2),score=_useState8[0],setScore=_useState8[1];var _useState9=useState([]),_useState10=_slicedToArray(_useState9,2),solved=_useState10[0],setSolved=_useState10[1];var _useState11=useState(false),_useState12=_slicedToArray(_useState11,2),disabled=_useState12[0],setDisabled=_useState12[1];var _useState13=useState(0),_useState14=_slicedToArray(_useState13,2),turns=_useState14[0],setTurns=_useState14[1];var _useState15=useState(0),_useState16=_slicedToArray(_useState15,2),points=_useState16[0],setPoints=_useState16[1];var _useState17=useState([]),_useState18=_slicedToArray(_useState17,2),restorgame=_useState18[0],setRestorGame=_useState18[1];useEffect(function(){resizeBoard();setCards(initializeDeck());},[]);useEffect(function(){preloadImages();});useEffect(function(){checkScore();},[score]);useEffect(function(){var resizeListener=window.addEventListener('resize',resizeBoard);return function(){return window.removeEventListener('resize',resizeListener);};});var handleClick=function handleClick(id){setDisabled(true);if(flipped.length===0){setFlipped([id]);setDisabled(false);}else if(sameCardClicked(id)){setDisabled(false);}else{setFlipped([flipped[0],id]);if(isMatch(id)){setSolved([].concat(_toConsumableArray(solved),[flipped[0],id]));setTurns(function(turns){return turns+1;});updateScore(score,checkScore);resetCards();}else{setTurns(function(turns){return turns+1;});setTimeout(resetCards,2000);}}};var preloadImages=function preloadImages(){cards.map(function(card){var src=\"/img/\".concat(card.type,\".png\");new Image().src=src;});};var resetCards=function resetCards(){setFlipped([]);setDisabled(false);};var updateScore=function updateScore(score,callback){var newScore=score+1;setScore(score+1);callback(newScore);};var checkScore=function checkScore(score){if(score>7){setPoints(points+1);setTimeout(newGame,3000);}};var newGame=function newGame(){setSolved([]);setCards(initializeDeck());setFlipped([]);setDisabled(false);setTurns(0);};var divStyle={display:'flex',flexDirection:'row',justifyContent:'center'};var sameCardClicked=function sameCardClicked(id){return flipped.includes(id);};var isMatch=function isMatch(id){var clickedCard=cards.find(function(card){return card.id===id;});var flippedCard=cards.find(function(card){return flipped[0]===card.id;});return flippedCard.type===clickedCard.type;};var resizeBoard=function resizeBoard(){setDimension(Math.min(document.documentElement.clientWidth,document.documentElement.clientHeight));};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h1\",null,\"Memory Game\"),/*#__PURE__*/React.createElement(\"h2\",null,\"Click the cards to  play\"),/*#__PURE__*/React.createElement(\"h3\",null,\" You took \",turns,\" turns\"),/*#__PURE__*/React.createElement(\"div\",{style:divStyle},/*#__PURE__*/React.createElement(\"button\",{className:\"SaveGame\",onClick:function onClick(){return setRestorGame(setFlipped([]),checkScore(),setSolved([]),setDisabled(false));}},\"Save Game\"),/*#__PURE__*/React.createElement(\"button\",{className:\"restart\",onClick:function onClick(){return newGame();}},\"Restart Game\")),/*#__PURE__*/React.createElement(\"div\",{className:\"points\"},\"Games Won: \",points,\" \"),/*#__PURE__*/React.createElement(Board,{dimension:dimension,cards:cards,flipped:flipped,solved:solved,handleClick:handleClick,disabled:disabled}));}","map":{"version":3,"sources":["/Users/maryabraham/workspaces/cardgame/src/App.jsx"],"names":["React","useState","useEffect","Board","Gameover","initializeDeck","App","cards","setCards","flipped","setFlipped","dimension","setDimension","score","setScore","solved","setSolved","disabled","setDisabled","turns","setTurns","points","setPoints","restorgame","setRestorGame","resizeBoard","preloadImages","checkScore","resizeListener","window","addEventListener","removeEventListener","handleClick","id","length","sameCardClicked","isMatch","updateScore","resetCards","setTimeout","map","card","src","type","Image","callback","newScore","newGame","divStyle","display","flexDirection","justifyContent","includes","clickedCard","find","flippedCard","Math","min","document","documentElement","clientWidth","clientHeight"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport React, { useState, useEffect }from 'react'\nimport Board from './components/board'\nimport Gameover from './components/gameover'\nimport initializeDeck from './deck'\n\n\nexport default function App() {\n  const [cards,setCards] = useState([])\n  const [flipped, setFlipped] = useState([])\n  const [dimension, setDimension] = useState(400)\n  const [score, setScore] = useState(0);\n  const [solved, setSolved] = useState([])\n  const [disabled, setDisabled] = useState(false)\n  const [turns, setTurns] = useState(0)\n  const [points, setPoints] = useState(0)\n  const [restorgame, setRestorGame] = useState([])\n  \n\n  \n  useEffect(() => {\n    resizeBoard()\n    setCards(initializeDeck())  \n\n  }, [])\n  useEffect(() => {\n    preloadImages()\n  })\n\n  useEffect(() => {\n    checkScore();\n  }, [score])\n\n  useEffect(() => {\n  const resizeListener = window.addEventListener('resize', resizeBoard)\n\n  return () => window.removeEventListener('resize', resizeListener)\n\n  })\n\n  const handleClick = (id) => {\n    setDisabled(true)\n    if (flipped.length === 0) {\n      setFlipped([id])\n      setDisabled(false)\n    }\n     else if (sameCardClicked(id)){\n      setDisabled(false)\n     } else {\n      setFlipped([flipped[0], id])     \n      if (isMatch(id)) {\n        setSolved([...solved, flipped[0], id])\n        setTurns(turns => turns + 1)\n        updateScore(score, checkScore);\n        resetCards()\n\n       \n      }else {\n        setTurns(turns => turns + 1)\n        setTimeout(resetCards, 2000)\n      }\n\n    }\n  }\n  const preloadImages = () => {\n    cards.map((card) =>{\n      const src = `/img/${card.type}.png`\n      new Image().src = src\n    })\n  }\n  const resetCards = () => {\n    setFlipped([])\n    setDisabled(false)\n  }\n\n  const updateScore = (score, callback) => {\n    let newScore = score + 1;\n    setScore(score + 1);\n    callback(newScore);\n  }\n  const checkScore = (score) => {\n    if (score>7) {\n      setPoints(points + 1)\n      setTimeout(newGame, 3000);\n    }\n  }\n\n  const newGame = () => {\n    setSolved([]);\n    setCards(initializeDeck());\n    setFlipped([]);\n    setDisabled(false);\n    setTurns(0);\n  }\n\n  const divStyle = {        \n   display: 'flex',      \n   flexDirection: 'row',        \n   justifyContent: 'center'    };\n\n\n\n\n\n  const sameCardClicked = (id) => flipped.includes(id) \n  const isMatch = (id) => {\n    const clickedCard = cards.find((card) => card.id === id);\n    const flippedCard = cards.find((card) => flipped[0] === card.id);\n    return flippedCard.type === clickedCard.type;\n  }\n  const resizeBoard = () => {\n    setDimension(Math.min(\n      document.documentElement.clientWidth,\n      document.documentElement.clientHeight,\n    \n    ),\n    )\n  }\n\n  return (\n\n    \n\n \n    <div>\n      <h1>Memory Game</h1>\n      <h2>Click the cards to  play</h2>\n      <h3> You took {turns} turns</h3>\n      <div style={divStyle}>\n      <button \n      className=\"SaveGame\" onClick={() => setRestorGame(setFlipped([]),checkScore(),setSolved([]),setDisabled(false))}>Save Game</button> \n      <button className=\"restart\" onClick={() => newGame()}>Restart Game</button>\n      </div>\n      <div className=\"points\">Games Won: {points} </div>\n      {/* <Gameover \n      newGame={newGame}\n      points={points}\n      restorgame={restorgame}\n      /> */}\n      \n      <Board\n       \n        dimension={dimension}\n        cards={cards}\n        flipped={flipped}\n        solved={solved}\n        handleClick={handleClick}\n        disabled={disabled}\n      />\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}